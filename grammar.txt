program = {funcDecl}
funcDecl = "func" ident paramList returnList block
paramList = "(" {ident ":" varType ","} [ident ":" varType]  ")"
returnList = varType | "(" varType {"," varType} ")"  // Return void or nothing?
block = "{" {statement} "}"
statement = funcCall ";"
            | varDecl ";"
            | varAssignment ";"
            | mutliAssignment ";"
            | ifStatement
            | forStatement
            | whileStatement
            | jumpStatement ";"
ifStatement = "if" expr block {"else" "if" expr block} ["else" block]
forStatement = "for" forClause block
forClause = [statement] ";" [expr] ";" [statement]
whileStatement = "while" expr block
jumpStatement = "continue" | "break" | "return" [expr {"," expr}]
varDecl = "var" ident ":" varType {"," ident : varType} "=" expr {"," expr}
varAssignment = varRef {"," varRef} assignOp expr {"," expr} 
varRef = ident {"[" expr "]"}           
varType = ident {"[" "]"}
funcCall = ident argList
argList = "(" [expr {"," expr}] ")"    


expr = logical
logical = equality {("&&" | "||") equality}
equality = comparison {("!=" | "==") comparison } ;
comparison = addition {(">" | ">=" | "<" | "<=") addition}
addition = multiplication {( "-" | "+" ) multiplication}
multiplication = unary {( "/" | "*" ) unary}
unary = (("!" | "-" | "+") unary) | postfix
// dotop
postfix = paran [argList] {"[" expr "]"} 
paran = "(" expr ")" | primary        
primary = ident | int | float | string | "false" | "true" | "nil" |

// Missing... class, switch, some operators, ranges, lot of literals, else if, else, foreach, multiple assignment
