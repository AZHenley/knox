program = {funcDecl}
funcDecl = "func" ident paramList ["out" paramList] block
paramList = "(" {ident ":" varType ","} [ident ":" varType]  ")"
block = "{" {statement} "}"
statement = funcCall
            | varDecl
            | varAssignment
            | ifStatement
            | forStatement
            | whileStatement
            | jumpStatement
ifStatement = "if" expr block
forStatement = "for" forClause block
forClause = [statement] ";" [expr] ";" [statement]
whileStatement = "while" expr block
jumpStatement = "continue" | "break" | "return"
varDecl = "let" ident ":" varType [assignOp expr]
varAssignment = varRef assignOp expr
varRef = ident {"[" expr "]"}           // The [] should be outside of this rule.
varType = ident {"[" [expr] "]"}
funcCall = ident argList
argList = "(" {expr ","} [expr] ")"     // The [] should be outside of this rule.


expr = logical
logical = equality {("&&" | "||") equality}
equality = comparison {("!=" | "==") comparison } ;
comparison = addition {(">" | ">=" | "<" | "<=") addition}
addition = multiplication {( "-" | "+" ) multiplication}
multiplication = unary {( "/" | "*" ) unary}
unary = (("!" | "-" | "+") unary) | postfix
// dotop
postfix = paran ({"[" expr "]"} | [argList])
paran = "(" expr ")" | primary        
primary = ident | int | float | string | "false" | "true" | "nil" |

// Missing... class, arrays of arrays, switch, newline/semicolon separators, some operators, ranges, lot of literals, else if, else, multiple assignment for multiple return values
